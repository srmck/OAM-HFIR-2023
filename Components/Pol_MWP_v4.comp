/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_MWP_v4.comp
* 
* %I
* Written by: Sam McKay
* Date: September 2024
* Origin: Indiana University
*
* Model of a magnetic Wollaston prism (MWP) that uses a supplied field integral
* expansion.
*
* %D
* Rectangular box that approximates the action of an MWP. A neutron hitting outside of 
* the opening square or the walls is absorbed. Precession only occurs in the z-x plane.
* Default parameters are from experimental data (F. Li, Review of Scientific Instruments, 2014).
* Assumes a field strength of 3.5 mT/amp (2.5 mT/amp when both triangular field regions align).
* Includes option for linear magnetic field gradients from aberrations in pole pieces.
*
* This component does NOT take gravity into account.
*
* Example: Pol_MWP_v4(xwidth=0.02,yheight=0.02,zdepth=0.1,current=10.0)
*
* %P
* INPUT PARAMETERS:
* xwidth:   [m]   		Width of opening 
* yheight:  [m]   		Height of opening
* zdepth:   [m]   		Length of field region
* current:  [A]	  		Current in each triangular field region
* Hyp_inv:  [N/A] 		(0 or 1) determines the hypotenuse orientation
* FI0:		[T m] 		Constant field integral term
* a:		[T/amp] 	FI = current*(FI0 + a*x + b*x*phi + c*y*psi + d*x*y*y)
* b:		[T/rad/amp]
* c:		[T/rad/amp]
* d:		[T/m^2/amp]
* B0:		[T]			Constant field (depends on length)
* Bx:		[T/m]		x field gradient (depends on length, independent of current)
* By:		[T/m]		y field gradient (depends on length, independent of current)
* Bz:		[T/m]		z field gradient (depends on length, independent of current)
*
* OUTPUT PARAMETERS:
*
* %E
*******************************************************************************/

DEFINE COMPONENT Pol_MWP_v4
SETTING PARAMETERS (xwidth=.02,yheight=.02,zdepth=0.1,current=10.0,Hyp_inv=0,FI0=.0,a=.007,b=.0072,c=.0001,d=-.26,B0=.0,Bx=.0,By=.0,Bz=.0)
OUTPUT PARAMETERS ()
// Neutron parameters: x, y, z, vx, vy, vz, t, sx, sy, sz, p

SHARE
%{
%}

DECLARE
%{
	double phase_fin;
	double gamma;
	double velocity;
	double FI;
	double LG;
	double phi;
	double psi;
%}

INITIALIZE
%{
	gamma = -1.832471*pow(10,8); //neutron gyromagnetic ratio
  
	if((xwidth<=0) || (yheight<=0) || (zdepth<=0)) {
		fprintf(stderr, "MWP: %s: Null or negative volume! \n"
		"ERROR (xwidth, yheight, zdepth); exiting. \n",
		NAME_CURRENT_COMP);
		exit(1);
	}
	if(Hyp_inv !=0 && Hyp_inv!=1) {
		fprintf(stderr, "MWP: %s: Hyp_inv must be either 0 or 1! \n"
		"ERROR; exiting. \n",
		NAME_CURRENT_COMP);
		exit(1);
	}
%}

TRACE
%{
	int unpol = 0;  //flags neutron as unpolarized
	double sx_in = sx, sy_in = sy, sz_in = sz; //initial spin components
	
	double phi_in = atan2(sz_in, sx_in);  //horizontal initial Larmor phase
	double theta_in;  //vertical initial Larmor phase
	
	double pmin = .01*.01;  //polarization threshold set at 1%
	double p2_tot = sx_in*sx_in + sy_in*sy_in + sz_in*sz_in;
	if (p2_tot < pmin) {
	    unpol = 1;
	}
	else {
		theta_in = acos(sy_in/p2_tot);
	}
	
	double deltaT = zdepth/vz; //time spent inside prism
	
	if (!inside_rectangle(x, y, xwidth, yheight)) //front mask
		{ ABSORB; }
	if (!inside_rectangle(x+vx*deltaT, y+vy*deltaT, xwidth, yheight)) //back mask
		{ ABSORB; }  
	
	PROP_Z0;
	PROP_DT(deltaT/2);  //propagate to center of device
	
	if (unpol == 0) {
		velocity = sqrt(vx*vx+vy*vy+vz*vz);
		phi = atan2(vx,vz); //horizontal plane angle
		psi = atan2(vy,vz); //vertical plane angle
  
		if(Hyp_inv == 1) {
			a = -a, d = -d;
			Bx = -Bx, Bz = -Bz;
		}
		LG = zdepth*(B0 + Bx*x + By*y + Bz*zdepth/2)*(1 + phi*phi/2 + psi*psi/2);  //linear gradient term
		FI = FI0 + a*x + b*x*phi + c*y*psi + d*x*y*y;
  
		phase_fin = gamma/velocity*(current*FI + LG) + phi_in;  //precession about y-axis
		sx = cos(phase_fin)*sin(theta_in);
		sy = cos(theta_in);
		sz = sin(phase_fin)*sin(theta_in);
	}
  
	SCATTER;
	PROP_DT(deltaT/2);
%}

MCDISPLAY
%{
	//box(0, 0, zdepth/2.0, xwidth, yheight, zdepth);
%}

END
